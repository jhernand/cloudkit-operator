//
// Copyright (c) 2025 Red Hat, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: fulfillment/v1/clusters_service.proto

package fulfillmentv1

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Clusters_List_FullMethodName                 = "/fulfillment.v1.Clusters/List"
	Clusters_Get_FullMethodName                  = "/fulfillment.v1.Clusters/Get"
	Clusters_GetKubeconfig_FullMethodName        = "/fulfillment.v1.Clusters/GetKubeconfig"
	Clusters_GetKubeconfigViaHttp_FullMethodName = "/fulfillment.v1.Clusters/GetKubeconfigViaHttp"
	Clusters_GetPassword_FullMethodName          = "/fulfillment.v1.Clusters/GetPassword"
	Clusters_GetPasswordViaHttp_FullMethodName   = "/fulfillment.v1.Clusters/GetPasswordViaHttp"
	Clusters_Create_FullMethodName               = "/fulfillment.v1.Clusters/Create"
	Clusters_Update_FullMethodName               = "/fulfillment.v1.Clusters/Update"
	Clusters_Delete_FullMethodName               = "/fulfillment.v1.Clusters/Delete"
)

// ClustersClient is the client API for Clusters service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClustersClient interface {
	// Retrieves the list of clusters.
	List(ctx context.Context, in *ClustersListRequest, opts ...grpc.CallOption) (*ClustersListResponse, error)
	// Retrieves the details of one specific cluster.
	Get(ctx context.Context, in *ClustersGetRequest, opts ...grpc.CallOption) (*ClustersGetResponse, error)
	// Returns the admin Kubeconfig of the cluster.
	//
	// This intended for use with the gRPC protocol, and it isn't mapped to an HTTP endpoint. To retrieve the Kubeconfig
	// via HTTP see the `ClustersGetKubeconfigViaHttp` method below.
	GetKubeconfig(ctx context.Context, in *ClustersGetKubeconfigRequest, opts ...grpc.CallOption) (*ClustersGetKubeconfigResponse, error)
	// Returns the admin Kubeconfig of the cluster.
	//
	// This is intended for use with HTTP and returns the YAML text of the Kubeconfig directly using the content type
	// `application/yaml`.
	//
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	GetKubeconfigViaHttp(ctx context.Context, in *ClustersGetKubeconfigViaHttpRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// Returns the admin password of the cluster.
	//
	// This intended for use with the gRPC protocol, and it isn't mapped to an HTTP endpoint. To retrieve the password
	// via HTTP see the `ClustersGetPasswordViaHttp` method below.
	GetPassword(ctx context.Context, in *ClustersGetPasswordRequest, opts ...grpc.CallOption) (*ClustersGetPasswordResponse, error)
	// Returns the admin password of the cluster.
	//
	// This is intended for use with HTTP and returns the YAML text of the password directly using the content type
	// `text/plain`.
	//
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	GetPasswordViaHttp(ctx context.Context, in *ClustersGetPasswordViaHttpRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// Creates a new cluster.
	//
	// Note that this operation is not allowed for regular users, only for the server. Regular users create clusters
	// indirectly, creating a cluster order that will eventually result in the system creating a cluster.
	Create(ctx context.Context, in *ClustersCreateRequest, opts ...grpc.CallOption) (*ClustersCreateResponse, error)
	// Updates an existing cluster.
	//
	// In the HTTP+JSON version of the API this is mapped to the `PATCH` verb and the `update_mask` field is automatically
	// populated from the list of fields present in the request body. For example, to update the `state` of a cluster to
	// `READY` the request line should be like this:
	//
	// ```http
	// PATCH /api/fulfillment/v1/clusters/123
	// ```
	//
	// And the request body should be like this:
	//
	// ```json
	//
	//	{
	//	  "status": {
	//	    "state": "CLUSTER_STATE_READY"
	//	  }
	//	}
	//
	// ```
	//
	// The response body will contain the modified object.
	Update(ctx context.Context, in *ClustersUpdateRequest, opts ...grpc.CallOption) (*ClustersUpdateResponse, error)
	// Delete a cluster.
	Delete(ctx context.Context, in *ClustersDeleteRequest, opts ...grpc.CallOption) (*ClustersDeleteResponse, error)
}

type clustersClient struct {
	cc grpc.ClientConnInterface
}

func NewClustersClient(cc grpc.ClientConnInterface) ClustersClient {
	return &clustersClient{cc}
}

func (c *clustersClient) List(ctx context.Context, in *ClustersListRequest, opts ...grpc.CallOption) (*ClustersListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClustersListResponse)
	err := c.cc.Invoke(ctx, Clusters_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Get(ctx context.Context, in *ClustersGetRequest, opts ...grpc.CallOption) (*ClustersGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClustersGetResponse)
	err := c.cc.Invoke(ctx, Clusters_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) GetKubeconfig(ctx context.Context, in *ClustersGetKubeconfigRequest, opts ...grpc.CallOption) (*ClustersGetKubeconfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClustersGetKubeconfigResponse)
	err := c.cc.Invoke(ctx, Clusters_GetKubeconfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) GetKubeconfigViaHttp(ctx context.Context, in *ClustersGetKubeconfigViaHttpRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, Clusters_GetKubeconfigViaHttp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) GetPassword(ctx context.Context, in *ClustersGetPasswordRequest, opts ...grpc.CallOption) (*ClustersGetPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClustersGetPasswordResponse)
	err := c.cc.Invoke(ctx, Clusters_GetPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) GetPasswordViaHttp(ctx context.Context, in *ClustersGetPasswordViaHttpRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, Clusters_GetPasswordViaHttp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Create(ctx context.Context, in *ClustersCreateRequest, opts ...grpc.CallOption) (*ClustersCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClustersCreateResponse)
	err := c.cc.Invoke(ctx, Clusters_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Update(ctx context.Context, in *ClustersUpdateRequest, opts ...grpc.CallOption) (*ClustersUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClustersUpdateResponse)
	err := c.cc.Invoke(ctx, Clusters_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Delete(ctx context.Context, in *ClustersDeleteRequest, opts ...grpc.CallOption) (*ClustersDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClustersDeleteResponse)
	err := c.cc.Invoke(ctx, Clusters_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClustersServer is the server API for Clusters service.
// All implementations must embed UnimplementedClustersServer
// for forward compatibility.
type ClustersServer interface {
	// Retrieves the list of clusters.
	List(context.Context, *ClustersListRequest) (*ClustersListResponse, error)
	// Retrieves the details of one specific cluster.
	Get(context.Context, *ClustersGetRequest) (*ClustersGetResponse, error)
	// Returns the admin Kubeconfig of the cluster.
	//
	// This intended for use with the gRPC protocol, and it isn't mapped to an HTTP endpoint. To retrieve the Kubeconfig
	// via HTTP see the `ClustersGetKubeconfigViaHttp` method below.
	GetKubeconfig(context.Context, *ClustersGetKubeconfigRequest) (*ClustersGetKubeconfigResponse, error)
	// Returns the admin Kubeconfig of the cluster.
	//
	// This is intended for use with HTTP and returns the YAML text of the Kubeconfig directly using the content type
	// `application/yaml`.
	//
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	GetKubeconfigViaHttp(context.Context, *ClustersGetKubeconfigViaHttpRequest) (*httpbody.HttpBody, error)
	// Returns the admin password of the cluster.
	//
	// This intended for use with the gRPC protocol, and it isn't mapped to an HTTP endpoint. To retrieve the password
	// via HTTP see the `ClustersGetPasswordViaHttp` method below.
	GetPassword(context.Context, *ClustersGetPasswordRequest) (*ClustersGetPasswordResponse, error)
	// Returns the admin password of the cluster.
	//
	// This is intended for use with HTTP and returns the YAML text of the password directly using the content type
	// `text/plain`.
	//
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	GetPasswordViaHttp(context.Context, *ClustersGetPasswordViaHttpRequest) (*httpbody.HttpBody, error)
	// Creates a new cluster.
	//
	// Note that this operation is not allowed for regular users, only for the server. Regular users create clusters
	// indirectly, creating a cluster order that will eventually result in the system creating a cluster.
	Create(context.Context, *ClustersCreateRequest) (*ClustersCreateResponse, error)
	// Updates an existing cluster.
	//
	// In the HTTP+JSON version of the API this is mapped to the `PATCH` verb and the `update_mask` field is automatically
	// populated from the list of fields present in the request body. For example, to update the `state` of a cluster to
	// `READY` the request line should be like this:
	//
	// ```http
	// PATCH /api/fulfillment/v1/clusters/123
	// ```
	//
	// And the request body should be like this:
	//
	// ```json
	//
	//	{
	//	  "status": {
	//	    "state": "CLUSTER_STATE_READY"
	//	  }
	//	}
	//
	// ```
	//
	// The response body will contain the modified object.
	Update(context.Context, *ClustersUpdateRequest) (*ClustersUpdateResponse, error)
	// Delete a cluster.
	Delete(context.Context, *ClustersDeleteRequest) (*ClustersDeleteResponse, error)
	mustEmbedUnimplementedClustersServer()
}

// UnimplementedClustersServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClustersServer struct{}

func (UnimplementedClustersServer) List(context.Context, *ClustersListRequest) (*ClustersListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedClustersServer) Get(context.Context, *ClustersGetRequest) (*ClustersGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedClustersServer) GetKubeconfig(context.Context, *ClustersGetKubeconfigRequest) (*ClustersGetKubeconfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKubeconfig not implemented")
}
func (UnimplementedClustersServer) GetKubeconfigViaHttp(context.Context, *ClustersGetKubeconfigViaHttpRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKubeconfigViaHttp not implemented")
}
func (UnimplementedClustersServer) GetPassword(context.Context, *ClustersGetPasswordRequest) (*ClustersGetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPassword not implemented")
}
func (UnimplementedClustersServer) GetPasswordViaHttp(context.Context, *ClustersGetPasswordViaHttpRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPasswordViaHttp not implemented")
}
func (UnimplementedClustersServer) Create(context.Context, *ClustersCreateRequest) (*ClustersCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedClustersServer) Update(context.Context, *ClustersUpdateRequest) (*ClustersUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedClustersServer) Delete(context.Context, *ClustersDeleteRequest) (*ClustersDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedClustersServer) mustEmbedUnimplementedClustersServer() {}
func (UnimplementedClustersServer) testEmbeddedByValue()                  {}

// UnsafeClustersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClustersServer will
// result in compilation errors.
type UnsafeClustersServer interface {
	mustEmbedUnimplementedClustersServer()
}

func RegisterClustersServer(s grpc.ServiceRegistrar, srv ClustersServer) {
	// If the following call pancis, it indicates UnimplementedClustersServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Clusters_ServiceDesc, srv)
}

func _Clusters_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClustersListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Clusters_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).List(ctx, req.(*ClustersListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClustersGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Clusters_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).Get(ctx, req.(*ClustersGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_GetKubeconfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClustersGetKubeconfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).GetKubeconfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Clusters_GetKubeconfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).GetKubeconfig(ctx, req.(*ClustersGetKubeconfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_GetKubeconfigViaHttp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClustersGetKubeconfigViaHttpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).GetKubeconfigViaHttp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Clusters_GetKubeconfigViaHttp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).GetKubeconfigViaHttp(ctx, req.(*ClustersGetKubeconfigViaHttpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_GetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClustersGetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).GetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Clusters_GetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).GetPassword(ctx, req.(*ClustersGetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_GetPasswordViaHttp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClustersGetPasswordViaHttpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).GetPasswordViaHttp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Clusters_GetPasswordViaHttp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).GetPasswordViaHttp(ctx, req.(*ClustersGetPasswordViaHttpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClustersCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Clusters_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).Create(ctx, req.(*ClustersCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClustersUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Clusters_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).Update(ctx, req.(*ClustersUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClustersDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Clusters_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).Delete(ctx, req.(*ClustersDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Clusters_ServiceDesc is the grpc.ServiceDesc for Clusters service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Clusters_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fulfillment.v1.Clusters",
	HandlerType: (*ClustersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Clusters_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Clusters_Get_Handler,
		},
		{
			MethodName: "GetKubeconfig",
			Handler:    _Clusters_GetKubeconfig_Handler,
		},
		{
			MethodName: "GetKubeconfigViaHttp",
			Handler:    _Clusters_GetKubeconfigViaHttp_Handler,
		},
		{
			MethodName: "GetPassword",
			Handler:    _Clusters_GetPassword_Handler,
		},
		{
			MethodName: "GetPasswordViaHttp",
			Handler:    _Clusters_GetPasswordViaHttp_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Clusters_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Clusters_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Clusters_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fulfillment/v1/clusters_service.proto",
}
